package polskowniaApp.user;

import jakarta.servlet.http.HttpServletRequest;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.web.bind.annotation.*;
import polskowniaApp.user.dto.CustomerDataWriteModel;
import polskowniaApp.security.JwtService;
import polskowniaApp.user.dto.UserDTO;
import polskowniaApp.utils.exception.UserAlreadyExistsException;

@RestController
class UserController
{
    private final JwtService jwtService;
    private final AuthenticationManager authManager;
    private final UserService userService;

    UserController(final JwtService jwtService, final AuthenticationManager authManager, final UserService userService)
    {
        this.jwtService = jwtService;
        this.authManager = authManager;
        this.userService = userService;
    }

    @PostMapping("/authenticate")
    ResponseEntity<?> authenticateUser(@RequestBody UserDTO user)
    {
        var userDetails = this.authManager.authenticate(new UsernamePasswordAuthenticationToken(user.getEmail(), user.getPassword()));

        if (!userDetails.isAuthenticated())
            throw new UsernameNotFoundException("Invalid user credentials!");

//        first time log should also set user name and change password from generated by system

        var logged = this.userService.getLoggedUserDataByEmail(user.getEmail(), this.jwtService.generateToken(user.getEmail()));

        return ResponseEntity.ok(logged);
    }

    @GetMapping("/students")
    ResponseEntity<?> getStudents()
    {
        return ResponseEntity.ok(this.userService.getStudentsAsReadModel());
    }

    @PutMapping("/restorePassword")
    ResponseEntity<?> restoreForgottenPassword(@RequestBody String email)
    {
        this.userService.restoreForgottenPassword(email);

        return ResponseEntity.ok("Password restored!");
    }

    @PutMapping("/changePassword")
    ResponseEntity<?> changePasswordByUser(HttpServletRequest request, @RequestBody String password)
    {
        this.userService.changePasswordByEmail(this.jwtService.getUserEmail(request), password);

        return ResponseEntity.ok("Password changed!");
    }

    @PostMapping("/register")
    ResponseEntity<?> registerUser(@RequestBody UserDTO user)
    {
        try
        {
            this.userService.createUser(user);

            return ResponseEntity.ok("User created!");
        }
        catch (UserAlreadyExistsException ex)
        {
            return ResponseEntity.badRequest().body(ex.getMessage());
        }
    }

    @PostMapping("/sendCustomerData")
    ResponseEntity<?> addCustomerData(@RequestBody CustomerDataWriteModel data, HttpServletRequest request)
    {
      return ResponseEntity.ok(this.userService.saveCustomerData(data, this.jwtService.getUserIdFromToken(request)));
    }

    @GetMapping("/getCustomerDataList")
    ResponseEntity<?> getCustomerDataList(HttpServletRequest request)
    {
        return ResponseEntity.ok(this.userService.getCustomerDataListByUserIdAsDto(this.jwtService.getUserIdFromToken(request)));
    }

    @GetMapping("/getDefaultCustomerData")
    ResponseEntity<?> getDefaultCustomerData(HttpServletRequest request)
    {
        return ResponseEntity.ok(this.userService.getDefaultCustomerDataByIdAsDto(this.jwtService.getUserIdFromToken(request)));
    }
}
